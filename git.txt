% This is the main document that compiles and combines all of the sub files
% This one has the preamble for all of the subfiles
% !!!!! Need to have a copy of styleBase.sty in the Chapters folder as well
\documentclass[11pt]{report}
%\usepackage{subfiles}				% compile every subfile independently 
\usepackage{Style-base}				% packages and definitions for my base style
\usepackage{Style-code}				% packages and definitions for my code style
% need to copy the .sty files into the same folder as the main document

\title{Brew and git}
%\author{}
\date{\today}							

\begin{document}
\maketitle

Command line stuff:
\begin{itemize}
	\item use single quotes to type folder names that include a space
	\item show path to an application (or any file? not sure): which <app>, for example which tree
	\item ../ goes up one level?
	\item ls, cd, etc.
	\item look into bash for more fancier terminal like window
	\item clear -> command that 'clears' the current screen, but it does this just by printing lots of newlines - the cleared contents just get scrolled up.
	\item to actually clear / remove all output and have a blank terminal window, use command + k
	\item create a new file: touch <filename + extension >
	\item get better text editor???? look into projects in bbedit first
	\item set defaults for finder to always have icon view and sort by name???
	\item go up levels in terminal: cd .. will bring you back exactly one directory up. You can string together those to go up multiple directories, e.g. up 3 ../../../
\end{itemize}


\section{Homebrew}

This is just explanations of some commands, so not like a comprehensive description of everything homebrew.

NOTE: \hl{can maybe change the formatting of the code snippets with the style}

Installation
\begin{itemize}
	\item Need to install X code before can install homebrew.xcode-select --install
	\item install homebrew: /bin/bash -c "(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	\item uninstall homebrew (note that this script doesn't remove any of the cask apps): /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
	\item Xcode comes with a bunch on unneeded stuff, so can remove most of it and save like 8 GB of space / memory. https://macperformanceguide.com/blog/2016/20161031_1600-XCode-saving-space.html
	\item Article to remove unneceassry things that come with installing Xcode. But not sure where Xcode gets saved, so moving on: https://macperformanceguide.com/blog/2016/20161031_1600-XCode-saving-space.html
	\item (relocate?) can see where homebrew is actually installing packages with: which. for tree, it shows /usr/local/bin/tree, but this is actually a symbolic link (???). so if do ls -la /usr/local/bin/brew, it shows the exact path (??? not sure what -la does, are spaces important?)
	\item Can ge tmore information about an installed package with: brew info <package>. This gives us when and where it was installed an some other stuff as well
	\item If run this info command on a package that is not installed, we can see the dependencies for the package and whether or not they are currently installed (red X if not)
	\item Can uninstall packages with: brew uninstall <package>
	\item this is where homebrew installs packages: /usr/local/Cellar
\end{itemize}

Commands and descriptions:
\begin{itemize}
	\item view list of packages that homebrew can install (there are lots of them): brew search.
	\item Can also search for specific ones by adding a string after brew search. for example, brew search postges. can also do this on the homebrew packages site
	\item SOmething about formula vs cask
	\item Can install any package with this: brew install <...>; installing tree which displays directory structures nicely in command line
	\item See what packages are currenlty installed: brew list
	\item Update all packages (i.e. fetch new versions): brew update
	\item See all packages that have an update available: brew outdated
	\item Can then updated all of the outdated packages with: brew upgrade
	\item By default, brew doesn't uninstall old versions of a package, so packages can accumulate over time. to remove all of the older versions: brew cleanup
	\item Self diagnosis tool for brew (checks if any problems in the system):brew doctor
	\item so far just been looking at / downloading command line tools
\end{itemize}

\begin{itemize}
	\item canuse omebrew to install mac applications as well and lots of other softwares
	\item can do this easily with an extension of homebrew, cask
	\item similar syntax (for everything) to adding packages, but now add cask: brew cask install <app>.for example, brew cask install firefox
	\item brew will go out and install firefox, this is an easier process that going to firefox's website, then downlaoding, then using the installer, etc
	\item brew cask also has a search command
	\item can run: brew cask info , on a package to see if it is indeed what we want. if we still want more info, can run: brew cask home <package>
	\item ??? not sure if all of the commands for brew exist for brew cask??? (e.g. brew list? and brew outdated))
	\item ?? what is this?  brew tap homebrew/cask, what does tap mean?  (something with updating homebrew I think?) see screenshot for available cask functions (use better word)... what is zaps?
	\item can  eventualy use homebrew and write scripts to set up new machines???? video breifly mentions it, but likely more videos on it
	\item usually install (fr all above) have been installing packages from the homebrew reposirotry, but we can use others/ Do this by "tap" the repository (which is a homebrew term)
	\item do this with: brew tap <repository name> (for example heroku/brew, this name was found in the heroku documentation. after tapping, we can then access like normal
\end{itemize}

other packages (from second youtube link in the resources)
\begin{itemize}
	\item htop -> see graphical representation of how system resources are being used and can do some task related commands all within terminal (e.g. kill, filter, etc.)
	\item speedtest -> test download and upload speed all from command line (avoids the hassel of going to speedtest.net)
	\item imagemagick -> really useful when working with images (can easily convert files to different types, change the resolution, edit images by adding borders, etc. can also use it to modify many files at the same time by using some simple statements.
\end{itemize}


Resources
\begin{itemize}
\item Homebrew homepage:https://brew.sh/
\item Homebrew packages: https://formulae.brew.sh/formula/
\item overview link https://www.youtube.com/watch?v=SELYgZvAZbU    Homebrew Tutorial: Simplify Software Installation on Mac Using This Package Manager
\item overview / demonstrates some cool packages https://www.youtube.com/watch?v=Ym2pxzWpTNw      Advanced macOS Tricks and Utilities Using Terminal!
\end{itemize}


IDEA! can use brew / git to make my R templates, then just need to put in correct location! maybe do this with other tempates, like latex (book or stand alone article) or rmd
\section{Git}

Overview
\begin{itemize}
\item ????? add commetns about what is git from the befinning of the video
\item also add stuff about git concepts
\item How peeps usually use git -> have a repository on your local machine that you work on and make changes, and then and then upload it or push it to a remote repositoy like github (??? does it make the folder git? or add a .git to the folder?
\item don't need an internet connection to work on a local repository, but you do need it to push to a remote repository.
\item once intialized that folder as a git repository, can then do some other commands
\item can install git from homebrew
\end{itemize}

Basic Commands
\begin{itemize}
\item git init -> initialize local git repository (run this command while in the desired directory which will become the repository, creates a .git file in the directory you're in, it is hidden by default, almost never need to go into this folder (not necessary to know what the files in there mean). now that its a git repository, we can start running git commands
\item git add <files> -> (add files(s) to index) adds specified files to the "staging area" (also called the Index), they will then be ready for commit (this command doesn't display or output anything), but can use git status to check what is in the staging area
\item git status -> shows what you have in the staging area that are ready to be committed (check status of working tree). also shows paths (files?) that have differences between the staging area and the workgin tree. it shows files that have changes to be committed and added to staging area. also the untracked files (files with changes that have not been sent to the index)
\item there are several ways to add files to the staging area: for example, git add *.html will add any html files to the index
\item use git add . to add everything
\item if a file is in the staging area and we edit and save it, it is now an untracked file so it needs to be added again in order to be ready to commit


\item remove file from staging area: git rm --cached <file>...
\item git commit (commit changes to index) -> when ready, can commit files, whcih  takes everythign in the staging area and puts them into the local repository (other options that we will get into later)
\item .... the rest of these are for remote repoistories like github
\item git push -> (push to remote repository) takes the local repository we made and pushes it to a remote repository like github
\item will need password, or can use ssh keys so don'e have to use password every time????
\item git pull ((pull latest from remote repository) -> pull the latest changes from a remote repository
\ite git clone (clone repository into a new directory) -> copies remote repos into curret folder. so if find a cool project on github and clone it, which downloads it to your machine
\item there are graphical tools, where you don't need to use commands. but should use commnads beacause not really  learningn anythingn if use GUI (so don't know how git works under the hood, and if we ever don't have the GUI, we are tots lost)
\item git can get complicated, but for what we are using it for it's not hard
	\item easiest way to show hidden files: command + shift + dot .
	\item ??? delete a git repository?
	\item at the very beginning before start doing anything, should add name and email to git. can use these commands: git config --global user.name '<my name>', and then run again, except use email instead of name (user.email 'email'
	\item (come back to this!!!) git commit (without option): terminal changes to a new editor. everything after # is a comment (so it's ignored). have to add a note about the commit (by not using #) or else the commit wont work. 
	\item process, type not on top line (it should automatically go into insert mode), then press esc to exit insert mode. then type :wq and then enter (which should show up on the last line after all of the ~. output gives us the number of files committed and supposedly thieir names (not sure why the names aren't displayed)
	\item ??? cursor starts at top line and can start typing???
	\item after committing everything, nothing is in the staging area, so git status says we have a clean tree
	\item (will do this eventually) remove .ds-store files if they get too annoying: https://hints.binaryage.com/how-to-remove-ds-store-files-from-a-git-repo/ or https://code.likeagirl.io/how-to-get-rid-of-ds-store-and-node-modules-in-git-repositories-d37b8a391247
	\item can use the commit command with an additional option to skip the whole edit stage described above: git commit -m '<comment>', inside the sinle quotes is the comment you want to add to this commit
	\item git ignore: this is the file that we can include the files and directories that we don't want include in our repository at all. even if we use git add ., it won't include the ignored files
	\item first need to create a .gitignore file, use this command: touch .gitignore so that it doen't throw an error about havinga file name start with a dot
	\item for example, create a log.txt file, typically we don't want to include log files. then just open up the .gitignore file and type in the name of the file we want to ignore. then when run git add ., log.txt will not be included with the files in the staging area
	\item can do this ignore thing with entire directories as well (/<folder name>, slightly different syntax because it's a folder). and can do this with expression such as *.txt
	\item hsould just be able to add items to be ignored by putting on new line? but not sure why not working??????
	
\end{itemize}

branches
\begin{itemize}
\item START HERE!!!!! 21 min into video
\end{itemize}

Resources
\begin{itemize}
\item git intro vid   Git & GitHub Crash Course For Beginners   https://www.youtube.com/watch?v=SWYqp7iY_Tc
\end{itemize}

\end{document}  